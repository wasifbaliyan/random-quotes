{"version":3,"sources":["quotebox.jsx","App.js","serviceWorker.js","index.js"],"names":["QuoteBox","quote","color","onClick","className","aria-hidden","content","title","author","target","rel","href","style","backgroundColor","App","state","isLoading","handleClick","a","fetch","response","json","setState","generateRandomColor","r","Math","floor","random","g","b","this","Fragment","height","textDecoration","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gTA4CeA,EA1CE,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,MAAOC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QAChC,OACE,yBAAKC,UAAU,+BACb,yBAAKA,UAAU,+DACb,gCAAYA,UAAU,cACpB,uBAAGA,UAAU,QACX,uBAAGA,UAAU,mBAAmBC,cAAY,SAC3C,IAAMJ,EAAMK,SAEf,4BAAQF,UAAU,qBAChB,0BAAMG,MAAM,UAAUN,EAAMO,UAGhC,yBAAKJ,UAAU,aACb,yBAAKA,UAAU,8CACb,uBACEK,OAAO,SACPC,IAAI,sBACJC,KAAI,sFAAiFV,EAAMK,QAAvF,eAAqGL,EAAMO,QAC/GI,MAAO,CACLC,gBAAiBX,GAEnBE,UAAU,+BAEV,uBAAGA,UAAU,gBAAgBC,cAAY,UAE3C,4BACEO,MAAO,CACLC,gBAAiBX,GAEnBE,UAAU,8BACVD,QAASA,GAET,uBAAGC,UAAU,2BAA2BC,cAAY,eCsCnDS,G,iNAnEbC,MAAQ,CACNd,MAAO,GACPC,MAAO,GACPc,WAAW,G,EAWbC,Y,sBAAc,8BAAAC,EAAA,sEACSC,MAAM,kCADf,cACRC,EADQ,gBAEMA,EAASC,OAFf,OAERpB,EAFQ,OAGZ,EAAKqB,SAAS,CAAErB,QAAOC,MAAO,EAAKqB,wBAHvB,2C,EAKdA,oBAAsB,WACpB,IAAMC,EAAIC,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBC,EAAIH,KAAKC,MAAsB,IAAhBD,KAAKE,UACpBE,EAAIJ,KAAKC,MAAsB,IAAhBD,KAAKE,UAC1B,MAAM,OAAN,OAAcH,EAAd,YAAmBI,EAAnB,YAAwBC,EAAxB,M,qNAjBqBV,MAAM,kC,cAAvBC,E,gBACcA,EAASC,O,OAAvBpB,E,OACJ6B,KAAKR,SAAS,CACZrB,QACAe,WAAW,EACXd,MAAO4B,KAAKP,wB,qIAcN,IAAD,EAC6BO,KAAKf,MAAjCb,EADD,EACCA,MAAOD,EADR,EACQA,MAAOe,EADf,EACeA,UACtB,OACE,kBAAC,IAAMe,SAAP,KACE,yBACEnB,MAAO,CACLoB,OAAQ,QACR9B,MAAO4B,KAAKf,MAAMb,MAClBW,gBAAiBiB,KAAKf,MAAMb,QAG9B,yBAAKE,UAAU,8BACb,wBAAIA,UAAU,mBAAd,0BAECY,EACC,yBAAKZ,UAAU,UAAf,cAEA,kBAAC,EAAD,CACEF,MAAOA,EACPD,MAAOA,EACPE,QAAS2B,KAAKb,cAIlB,wBAAIb,UAAU,kCAAd,uBACyB,IACvB,uBACEQ,MAAO,CAAEqB,eAAgB,QACzBtB,KAAK,uCACLD,IAAI,sBACJD,OAAO,UAEP,wBAAIL,UAAU,cAAd,yB,GA1DE8B,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.580a7c46.chunk.js","sourcesContent":["import React from \"react\";\n\nconst QuoteBox = ({ quote, color, onClick }) => {\n  return (\n    <div className=\"row  justify-content-center\">\n      <div className=\"col col-md-6 bg-light p-5 shadow rounded align-items-center\">\n        <blockquote className=\"blockquote\">\n          <p className=\"mb-0\">\n            <i className=\"fa fa-quote-left\" aria-hidden=\"true\"></i>\n            {\" \" + quote.content}\n          </p>\n          <footer className=\"blockquote-footer\">\n            <cite title=\"Author\">{quote.author}</cite>\n          </footer>\n        </blockquote>\n        <div className=\"container\">\n          <div className=\"row align-items-end justify-content-around\">\n            <a\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              href={`https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=\"${quote.content}\" - ${quote.author}`}\n              style={{\n                backgroundColor: color,\n              }}\n              className=\"btn btn-sm text-white px-3 \"\n            >\n              <i className=\"fa fa-twitter\" aria-hidden=\"true\"></i>\n            </a>\n            <button\n              style={{\n                backgroundColor: color,\n              }}\n              className=\"btn btn-sm text-white px-3 \"\n              onClick={onClick}\n            >\n              <i className=\"fa fa-arrow-circle-right\" aria-hidden=\"true\"></i>\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default QuoteBox;\n","import React, { Component } from \"react\";\n\nimport QuoteBox from \"./quotebox\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    quote: {},\n    color: \"\",\n    isLoading: true,\n  };\n  async componentDidMount() {\n    let response = await fetch(`https://api.quotable.io/random`);\n    let quote = await response.json();\n    this.setState({\n      quote,\n      isLoading: false,\n      color: this.generateRandomColor(),\n    });\n  }\n  handleClick = async () => {\n    let response = await fetch(`https://api.quotable.io/random`);\n    let quote = await response.json();\n    this.setState({ quote, color: this.generateRandomColor() });\n  };\n  generateRandomColor = () => {\n    const r = Math.floor(Math.random() * 256);\n    const g = Math.floor(Math.random() * 256);\n    const b = Math.floor(Math.random() * 256);\n    return `rgb(${r},${g},${b})`;\n  };\n  render() {\n    const { color, quote, isLoading } = this.state;\n    return (\n      <React.Fragment>\n        <div\n          style={{\n            height: \"100vh\",\n            color: this.state.color,\n            backgroundColor: this.state.color,\n          }}\n        >\n          <div className=\"container text-center py-5\">\n            <h2 className=\"text-light my-5\">Random Quote Generator</h2>\n\n            {isLoading ? (\n              <div className=\"loader\">Loading...</div>\n            ) : (\n              <QuoteBox\n                color={color}\n                quote={quote}\n                onClick={this.handleClick}\n              />\n            )}\n\n            <h6 className=\"text-light my-5 text-secondary\">\n              &copy; 2020 created by{\" \"}\n              <a\n                style={{ textDecoration: \"none\" }}\n                href=\"https://www.twitter.com/wasifbaliyan\"\n                rel=\"noopener noreferrer\"\n                target=\"_blank\"\n              >\n                <em className=\"text-white\">wasifbaliyan</em>\n              </a>\n            </h6>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"font-awesome/css/font-awesome.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}